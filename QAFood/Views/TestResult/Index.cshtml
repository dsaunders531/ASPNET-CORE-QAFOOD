@model TestResultViewModel

@inject TestResultService TestResultService

@{
    // Setup some basic defaults for the home page.
    Model.PageMeta.PageTitle = "Test Results";
    Model.PageMeta.Description = "Test Results";
    Model.PageMeta.AddKeyword("Test Results");
}

@* Test Results page: Parcels -> Food Items -> Quantity reviews, total score / max score (q reviews * 5), average score *@

<h2>Test Results</h2>

@if (Model.FoodParcels.Count == 0)
{
    <p>There are no food parcels to review.</p>
}
else
{
    @foreach (FoodParcel foodParcel in Model.FoodParcels.OrderBy(p => p.PostedDate))
    {
        long testCount = foodParcel.TestResults.Count();

        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>@foodParcel.Name</h4>
                <p>Posted on @foodParcel.PostedDate.ToShortDateString().</p>
            </div>
            <div class="panel-body">
                @if (foodParcel.TestResults.Count == 0)
                {
                    <p>No tests have been performed on this parcel.</p>
                }
                else
                {
                    List<TestResultItem> completedTests = TestResultService.CompletedTests(foodParcel);

                    foreach (FoodItem foodItem in foodParcel.FoodItems)
                    {
                        long foodItemTestCount = TestResultService.ReviewCountForFoodItem(foodItem, completedTests);

                        <h3>@foodItem.Description</h3>
                        <p>
                            @foodItemTestCount @(string.Format("{0}", "review").Pluralize(foodItemTestCount)) completed.
                        </p>

                        @if (foodItemTestCount > 0)
                        {
                            <div class="row more-padding-top">
                                <div class="col-sm-4 text-left"><h5>Test Category</h5></div>
                                <div class="col-sm-4 text-center"><h5>Total Score</h5></div>
                                <div class="col-sm-4 text-right"><h5>Average Score</h5></div>
                            </div>

                            @* A list of category with Sum over possible and average *@
                            List<string> testCategories = TestResultService.CategoriesForTestResults(TestResultService.CompletedReviewsForFoodItem(foodItem, completedTests));

                            foreach (string category in testCategories)
                            {
                                long categoryTotal = TestResultService.ResultTotalForFoodItemAndCategory(foodItem, category, completedTests);
                                long maxPossibleScore = foodItemTestCount * 5;

                                <div class="row">
                                    <div class="col-sm-4 text-left">@category</div>
                                    <div class="col-sm-4 text-center"><strong>@categoryTotal.ToString()</strong> / @maxPossibleScore</div>
                                    <div class="col-sm-4 text-right">@(categoryTotal / foodItemTestCount)</div>
                                </div>
                            }
                        }
                    }
                }
            </div>
        </div>
    }
}
